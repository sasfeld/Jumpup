<h1><?php echo $this->translate("View bookings") ?></h1>

<div id="driver_view_bookings">
<?php 
    /*
     * author: Sascha Feldmann
     * 
     * Render the bookings exported by the BookingController -> viewBookingsAction.
     */
    use JumpUpUser\Forms\RegistrationForm;
    use JumpUpDriver\Util\Messages\IControllerMessages;   
    use JumpUpPassenger\Util\IBookingState;
    use Zend\Form\Annotation\AnnotationBuilder;
    use JumpUpDriver\Util\Messages\IViewMessages;
    
    use JumpUpDriver\Util\Routes\IRouteStore;
    
    
    use JumpUpDriver\Forms\RecommendationForm;
    use JumpUpPassenger\Models\Booking;
    use JumpUpDriver\Util\Messages\StateUtil;
use JumpUpDriver\Forms\BasicBookingForm;
    
    
    /**
     * Create and reutrn a RecommendationForm for a single booking. 
     * The bookingId will be set to a hidden input field.
     * @param Booking $booking
     * @return Ambigous <\Zend\Form\Form, \Zend\Form\ElementInterface, ElementInterface, \Zend\Form\FormInterface, \Zend\Form\FieldsetInterface>
     */
    function _getRecommForm(Booking $booking) {
        $builder = new AnnotationBuilder();
        $recomForm = $builder->createForm(new RecommendationForm());
        $recomForm->setAttribute('action', \JumpUpDriver\Util\Routes\IRouteStore::BOOK_DO_RECOMMENDATION);
        $recomForm->get(RecommendationForm::FIELD_BOOKING_ID)->setValue($booking->getId());
        return $recomForm;
    }
    
    function _getDenyForm(Booking $booking) {
    	$builder = new AnnotationBuilder();
    	$basicForm = $builder->createForm(new BasicBookingForm());
    	$basicForm->setAttribute('action', \JumpUpDriver\Util\Routes\IRouteStore::BOOK_DENY);
    	$basicForm->get(BasicBookingForm::FIELD_BOOKING_ID)->setValue($booking->getId());
    	$basicForm->get(BasicBookingForm::SUBMIT)->setValue(IViewMessages::BOOKING_DENY);
    	return $basicForm;
    }
    
    function _getApplyForm(Booking $booking) {
    	$builder = new AnnotationBuilder();
    	$basicForm = $builder->createForm(new BasicBookingForm());
    	$basicForm->setAttribute('action', \JumpUpDriver\Util\Routes\IRouteStore::BOOK_APPLY);
    	$basicForm->get(BasicBookingForm::FIELD_BOOKING_ID)->setValue($booking->getId());
    	$basicForm->get(BasicBookingForm::SUBMIT)->setValue(IViewMessages::BOOKING_APPLY);
    	return $basicForm;
    }
    
    function _renderBooking(Booking $booking, $_this) {
      $applyForm = _getApplyForm($booking);
      $denyForm = _getDenyForm($booking);
      echo "<h3>" . $_this->translate($booking->getStartPoint() . " => " . $booking->getEndPoint()) .
        " (". $_this->translate("Date") ." - ".$_this->translate(IViewMessages::BOOKING_DATE) .")"
        ."</h3>";
      echo '<div class="booking">'; // begin of accordion element content
	  echo  $_this->renderForm($applyForm);
	  echo  $_this->renderForm($denyForm); 
	  // passenger information
	  echo "<p>".$_this->translate(IViewMessages::BOOKING_PASSENGER).": ".$booking->getPassenger()->getPrename() . " " . $booking->getPassenger()->getLastname() . "</p>";
      // render status
      echo "<p>".$_this->translate(IViewMessages::BOOKING_STATE).": ".$_this->translate(StateUtil::getStateLabel($booking->getState()))."</p>";
      // differ bookings states
      if ($booking->getState() === IBookingState::OFFER_FROM_PASSENGER) {
        echo $_this->translate(IControllerMessages::BOOKING_STATE_PASSENGER_RECOMM) . "<br />";
        echo $_this->translate("Passenger's price recommendation: ".$booking->getPassengersRecomPrice());
        // show recommendation form
        $recommForm = _getRecommForm($booking);
        echo $_this->renderForm($recommForm);
      }
      elseif($booking->getState() === IBookingState::ACCEPT) {
      
      }
      elseif($booking->getState() === IBookingState::DENY) {
      
      }
      elseif($booking->getState() === IBookingState::OFFER_FROM_DRIVER) {
      
      }
      echo "</div>"; // end of accordion element content
      
    }
    
 
    if(null !== $this->bookings && (0 < sizeof($this->bookings))) {
        echo '<div id="accordion">'; // start of accordion
        foreach ($this->bookings as $booking) {
          _renderBooking($booking, $this);
        }
        echo "</div>"; // end of accordion
    }
    else { // no bookings done
      echo $this->translate(IControllerMessages::BOOKING_NO_BOOKINGS);    
    }
    
  
  
   
?>
</div>

